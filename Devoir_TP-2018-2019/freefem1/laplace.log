-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : //verbosity 0;
    2 :
    3 : // Trace de l'√©x√©cution dans un fichier
    4 : ofstream tfile("output/laplace_trace_umfpack.txt");
    5 : // Fichier de sortie sous forme de tableau pour trac√© gnuplot
    6 : ofstream gfile("output/laplace_errors_umfpack.txt");
    7 :
    8 : tfile << "Probleme de Laplace" << endl;
    9 :
   10 : gfile << "# Resolution de -Laplacien(u) = f avec u = 0 au b
  ... : ord" << endl;
   11 : gfile << "# sur le carre [0,1]x[0,1] en elements finis P1 L
  ... : agrange" << endl;
   12 : gfile << "# sur une suite de maillages" << endl;
   13 : gfile << "# et pour une solution analytique quadratique en
  ... : x et y" << endl;
   14 :
   15 : gfile << "# pas h, erreur L^2 relative, erreur relative L^2
  ... :  sur le gradient, temps CPU" << endl;
   16 :
   17 : // D√©finition des bord du domaine de calcul
   18 : border Gamma1(t=0,1) {x=t; y=0;};
   19 : border Gamma2(t=0,1) {x=1; y=t;};
   20 : border Gamma3(t=0,1) {x=1-t; y=1;};
   21 : border Gamma4(t=0,1) {x=0; y=1-t;};
   22 :
   23 : // Boucle sur une famille de maillages de plus en plus fins
   24 : for (int k=0;k<6;++k) // Pour k=7, √ßa devient trop gros
   25 :   {
   26 :     // Construction du maillage
   27 :     int n = 10*2^k; // Nombre de points par c√¥t√©
   28 :     real t1 = clock(); // Pour mesure du temps cpu
   29 :     mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n));
   30 :
   31 :     tfile << "k = " << k << endl;
   32 :     tfile << "  Nombre de sommets par cote : " << n << endl;
   33 :     tfile << "  Nombre de sommets dans le maillage : " << Th.nv << endl;
   34 :     tfile << "  Nombre de triangles dans le maillage : " << Th.nt << endl;
   35 :
   36 :     // Affichage et sortie fichierdu maillage seul
   37 :     //plot(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n));
   38 :     //plot(Th, wait=1, ps="laplace.eps");
   39 :
   40 :     // D√©finition de l'espace de discr√©tisation. Ici on discr√©tise
   41 :     // V=H^1_0(\Omega) avec des √©l√©ments finis P1-Lagrange
   42 :     fespace Vh(Th,P1);
   43 :     tfile << "  Nombre de degres de liberte : " << Vh.ndof << endl;
   44 :
   45 :     cout << "*** k = " << k << " --> n = " << n << " , #DOf = " << Vh.ndof << " ***" << endl;
   46 :
   47 :     // D√©finition de la formulation variationnelle dans Vh
   48 :
   49 :     // On a besoin de 2 fonctions u et v dans Vh
   50 :     Vh u,v;
   51 :     // D'une fonction definie de mani√®re analytique (pour le second membre)
   52 :     func f = 2*(x*(1-x)+y*(1-y));
   53 :     // Qui s'annule bien au bord du domaine et dont la solution (de
   54 :     // -Laplacien(u)=f) est $u(x,y) = x(1-x)y(1-y).
   55 :
   56 :     // Voici finalement notre probl√®me, avec son solveur lin√©aire
   57 :     problem laplace(u,v,solver=UMFPACK) = int2d(Th)( dx(u)*dx(v) + dy(u)*dy(v) )
   58 :       - int2d(Th)( f*v ) + on(Gamma1,Gamma2,Gamma3,Gamma4,u=0);
   59 :
   60 :     // R√©solution du syst√®me lin√©aire
   61 :     laplace;
   62 :
   63 :     // Visualisation de la solution
   64 :     //plot(u, fill=true,value=true,boundary=true,wait=true);
   65 :
   66 :     // Solution exacte projetee dans Vh
   67 :     Vh ue, dxue, dyue;
   68 :     ue = x*(1-x)*y*(1-y); // Expression de la solution exacte
   69 :     dxue = (1-2*x)*y*(1-y);
   70 :     dyue = x*(1-x)*(1-2*y);
   71 :
   72 :     // Calcul des erreurs
   73 :     real normeL2, errL2, normeH1, errH1;
   74 :     normeL2 = sqrt( int2d(Th) ( (ue)^2 ) );
   75 :     errL2 = sqrt( int2d(Th) ( (u-ue)^2 ) );
   76 :
   77 :     normeH1 = sqrt( int2d(Th) ( (ue)^2 ) + int2d(Th) ( (dxue)^2 ) + int2d(Th) ( (dyue)^2 ));
   78 :     errH1   = sqrt( int2d(Th) ( (u-ue)^2 ) + int2d(Th) ( (dx(u)-dxue)^2 ) + int2d(Th) ( (dy(u)-dyue)^2 ));
   79 :
   80 :
   81 :     real t2 = clock(); // Pour mesure du temps cpu
   82 :
   83 :     tfile << "  Erreur L2 relative : " << errL2/normeL2 << endl;
   84 :     tfile << "  Erreur H1 relative : " << errH1/normeH1 << endl;
   85 :     tfile << "  Temps CPU total : " << t2-t1 << endl;
   86 :     tfile << "  min(u) : " << u[].min << "  max(u) : " << u[].max << "  min(ue) : " << ue[].min << "  max(ue) :
à" << ue[].max << endl;
   87 :
   88 :
   89 :     gfile << 1./n << "  " << errL2/normeL2 << "  " << errH1/normeH1 << "  " << t2-t1 << endl;
   90 : //    gfile << 1./n << "  " << errH1/normeH1 << "  " << t2-t1 << endl;
   91 :   }
   92 :  sizestack + 1024 =5440  ( 4416 )
 
  --  mesh:  Nb of Triangles =    240, Nb of Vertices 141
*** k = 0 --> n = 10 , #DOf = 141 ***
  -- Solve :
          min 8.65664e-063  max 0.0623534
  --  mesh:  Nb of Triangles =    952, Nb of Vertices 517
*** k = 1 --> n = 20 , #DOf = 517 ***
  -- Solve :
          min 2.4509e-063  max 0.0624712
  --  mesh:  Nb of Triangles =   3770, Nb of Vertices 1966
*** k = 2 --> n = 40 , #DOf = 1966 ***
  -- Solve :
          min 6.42053e-064  max 0.0624858
  --  mesh:  Nb of Triangles =  15042, Nb of Vertices 7682
*** k = 3 --> n = 80 , #DOf = 7682 ***
  -- Solve :
          min 1.6598e-064  max 0.0624962
  --  mesh:  Nb of Triangles =  60816, Nb of Vertices 30729
*** k = 4 --> n = 160 , #DOf = 30729 ***
  -- Solve :
          min 4.17528e-065  max 0.0624987
  --  mesh:  Nb of Triangles = 243846, Nb of Vertices 122564
*** k = 5 --> n = 320 , #DOf = 122564 ***
  -- Solve :
          min 1.04765e-065  max 0.0624997
times: compile 0.192s, execution 4.919s,  mpirank:0
 ######## We forget of deleting   583 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3258,  size :392552 mpirank: 0
Ok: Normal End
 try getConsole C:\Users\PC\Desktop\MN&CHP_UniversitÈ-De-Bordeaux\Projet_MNEIncompresible\Devoir_TP-2018\freefem1\laplacàe.edp
